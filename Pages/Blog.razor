@page "/blogs/{FileName}"
@using Markdown = Markdig.Markdown
@using Markdig
@using Markdig.Extensions.Yaml
@using Markdig.Renderers
@using Markdig.Syntax
@inject NavigationManager Navigation
@inject HttpClient Client

<PageTitle>Brady Stroud | Blogs | @Data.Title</PageTitle>

@if (string.IsNullOrEmpty(RenderedContent))
{
    return;
}

<h1>@Data.Title</h1>
<p>@Data.Date</p>

@((MarkupString) RenderedContent)


@code {

    [Parameter]
    public string FileName { get; set; }

    private Frontmatter Data { get; set; } = new Frontmatter();

    private string? RenderedContent { get; set; } = "<h1> TEST </h1>";

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(FileName))
        {
            Navigation.NavigateTo("/");
        }

        var response = await Client.GetAsync($"Content/Blogs/{FileName}.md");

        if (response.IsSuccessStatusCode)
        {
            var contents = await response.Content.ReadAsStringAsync();

            var pipeline = new MarkdownPipelineBuilder()
                .UseYamlFrontMatter()
                .UseAutoLinks()
                .UseUrlRewriter(link => link?.Url?.Replace("Images/", "Content/Blogs/Images/"))
                .Build();

            var writer = new StringWriter();
            var renderer = new HtmlRenderer(writer);
            pipeline.Setup(renderer);

            var document = Markdown.Parse(contents, pipeline);
            var yamlBlock = document.Descendants<YamlFrontMatterBlock>().FirstOrDefault();

            if (yamlBlock != null)
            {
                var yaml = contents.Substring(yamlBlock.Span.Start, yamlBlock.Span.Length);

                var lines = yaml.Split('\n');

                var props = Data.GetType().GetProperties();

                foreach (var prop in props)
                {
                    var yamlLine = lines.FirstOrDefault(l => l.ToLower().StartsWith(prop.Name.ToLower()));

                    if (yamlLine == null) continue;
                    
                    var value = yamlLine.Split(':')[1].Trim();
                    prop.SetValue(Data, value);
                }
            }

            Console.WriteLine(Data.Title);
            Console.WriteLine(Data.Date);
            
            renderer.Render(document);
            await writer.FlushAsync();
            RenderedContent = writer.ToString();
        }
    }

}